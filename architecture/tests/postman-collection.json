{
	"info": {
		"_postman_id": "shop-management-api-tests",
		"name": "Shop Management API",
		"description": "Comprehensive API test collection for the multi-tenant shop management system. This collection includes authentication, CRUD operations, search functionality, and edge case testing.\n\n## Setup Instructions\n\n1. **Environment Variables**: Set up the following variables in Postman:\n   - `base_url`: API base URL (e.g., https://api.shopmanagement.com)\n   - `auth_token`: JWT token (auto-populated after login)\n   - `tenant_id`: Current tenant UUID\n   - `shop_id`: Test shop UUID\n   - `user_id`: Current user UUID\n\n2. **Authentication**: Run the \"Login\" request first to populate auth tokens\n\n3. **Test Data**: Some requests use dynamic variables - update as needed\n\n## Test Coverage\n- Authentication & Authorization\n- Multi-tenant data isolation\n- CRUD operations for all resources\n- Search and filtering\n- Error handling and edge cases\n- Performance and load testing scenarios",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "shop-management-team"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token).to.not.be.undefined;",
									"    pm.environment.set(\"auth_token\", jsonData.access_token);",
									"    pm.environment.set(\"tenant_id\", jsonData.user.tenant_id);",
									"    pm.environment.set(\"user_id\", jsonData.user.id);",
									"});",
									"",
									"pm.test(\"Token structure is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token).to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/);",
									"    pm.expect(jsonData.expires_in).to.be.a('number');",
									"    pm.expect(jsonData.token_type).to.eql('Bearer');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"owner@testshop.com\",\n  \"password\": \"SecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Authenticate user and obtain JWT token"
					},
					"response": []
				},
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"User created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.email).to.not.be.undefined;",
									"    pm.expect(jsonData.user.tenant_id).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"newuser@testshop.com\",\n  \"password\": \"SecurePass123!\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"role\": \"SHOP_EMPLOYEE\",\n  \"shop_id\": \"{{shop_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"New token received\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.access_token).to.not.be.undefined;",
									"    pm.environment.set(\"auth_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "Authentication and user management endpoints"
		},
		{
			"name": "Shops",
			"item": [
				{
					"name": "Get All Shops",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Pagination info present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination).to.not.be.undefined;",
									"    pm.expect(jsonData.pagination.page).to.be.a('number');",
									"    pm.expect(jsonData.pagination.limit).to.be.a('number');",
									"    pm.expect(jsonData.pagination.total).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/shops?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Shop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Shop created with correct data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Test Shop API\");",
									"    pm.expect(jsonData.tenant_id).to.eql(pm.environment.get(\"tenant_id\"));",
									"    pm.environment.set(\"shop_id\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Shop API\",\n  \"description\": \"Test shop created via API\",\n  \"category\": \"electronics\",\n  \"address\": {\n    \"street\": \"123 Test Street\",\n    \"city\": \"Test City\",\n    \"state\": \"TC\",\n    \"postal_code\": \"12345\",\n    \"country\": \"US\"\n  },\n  \"location\": {\n    \"latitude\": 40.7128,\n    \"longitude\": -74.0060\n  },\n  \"contact\": {\n    \"phone\": \"+1-555-0123\",\n    \"email\": \"contact@testshop.com\",\n    \"website\": \"https://testshop.com\"\n  },\n  \"business_hours\": {\n    \"monday\": { \"open\": \"09:00\", \"close\": \"18:00\" },\n    \"tuesday\": { \"open\": \"09:00\", \"close\": \"18:00\" },\n    \"wednesday\": { \"open\": \"09:00\", \"close\": \"18:00\" },\n    \"thursday\": { \"open\": \"09:00\", \"close\": \"18:00\" },\n    \"friday\": { \"open\": \"09:00\", \"close\": \"20:00\" },\n    \"saturday\": { \"open\": \"10:00\", \"close\": \"18:00\" },\n    \"sunday\": { \"open\": \"12:00\", \"close\": \"17:00\" }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/shops",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Shop by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Shop data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"shop_id\"));",
									"    pm.expect(jsonData.tenant_id).to.eql(pm.environment.get(\"tenant_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/shops/{{shop_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"{{shop_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Shop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Shop updated correctly\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.description).to.include(\"Updated\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Updated test shop description\",\n  \"contact\": {\n    \"phone\": \"+1-555-0124\",\n    \"email\": \"updated@testshop.com\",\n    \"website\": \"https://updated-testshop.com\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/shops/{{shop_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"{{shop_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Shop management endpoints"
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Products array returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Products belong to correct tenant\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        pm.expect(jsonData.data[0].tenant_id).to.eql(pm.environment.get(\"tenant_id\"));",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/shops/{{shop_id}}/products?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"{{shop_id}}",
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Product created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Test Product API\");",
									"    pm.expect(jsonData.shop_id).to.eql(pm.environment.get(\"shop_id\"));",
									"    pm.environment.set(\"product_id\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Product API\",\n  \"description\": \"Test product created via API\",\n  \"category_id\": \"electronics-smartphones\",\n  \"price\": 299.99,\n  \"currency\": \"USD\",\n  \"cost\": 199.99,\n  \"sku\": \"TST-API-001\",\n  \"barcode\": \"1234567890123\",\n  \"weight\": 0.2,\n  \"dimensions\": {\n    \"length\": 15.0,\n    \"width\": 7.0,\n    \"height\": 0.8,\n    \"unit\": \"cm\"\n  },\n  \"attributes\": {\n    \"color\": \"Black\",\n    \"brand\": \"TestBrand\",\n    \"model\": \"API-2024\",\n    \"warranty\": \"1 year\"\n  },\n  \"images\": [\n    {\n      \"url\": \"https://example.com/product1.jpg\",\n      \"alt_text\": \"Test Product Front View\",\n      \"order\": 1\n    }\n  ],\n  \"seo\": {\n    \"meta_title\": \"Test Product API - Best Test Product\",\n    \"meta_description\": \"High-quality test product for API testing purposes\",\n    \"slug\": \"test-product-api\"\n  },\n  \"status\": \"active\",\n  \"visibility\": \"public\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/shops/{{shop_id}}/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"{{shop_id}}",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product details correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"product_id\"));",
									"    pm.expect(jsonData.shop_id).to.eql(pm.environment.get(\"shop_id\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/shops/{{shop_id}}/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"{{shop_id}}",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.price).to.eql(349.99);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"price\": 349.99,\n  \"description\": \"Updated test product description with more features\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/shops/{{shop_id}}/products/{{product_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"{{shop_id}}",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Search results returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.search_metadata).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/search/products?q=test&category=electronics&min_price=100&max_price=500&sort=price_asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"search",
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "test"
								},
								{
									"key": "category",
									"value": "electronics"
								},
								{
									"key": "min_price",
									"value": "100"
								},
								{
									"key": "max_price",
									"value": "500"
								},
								{
									"key": "sort",
									"value": "price_asc"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Product management and search endpoints"
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Get Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Orders array returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/shops/{{shop_id}}/orders?page=1&limit=10&status=pending",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"{{shop_id}}",
								"orders"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "status",
									"value": "pending"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Order created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.order_number).to.not.be.undefined;",
									"    pm.expect(jsonData.status).to.eql(\"pending\");",
									"    pm.environment.set(\"order_id\", jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customer\": {\n    \"email\": \"customer@example.com\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Customer\",\n    \"phone\": \"+1-555-0199\"\n  },\n  \"items\": [\n    {\n      \"product_id\": \"{{product_id}}\",\n      \"quantity\": 2,\n      \"unit_price\": 349.99\n    }\n  ],\n  \"shipping_address\": {\n    \"street\": \"456 Customer St\",\n    \"city\": \"Customer City\",\n    \"state\": \"CC\",\n    \"postal_code\": \"67890\",\n    \"country\": \"US\"\n  },\n  \"billing_address\": {\n    \"street\": \"456 Customer St\",\n    \"city\": \"Customer City\",\n    \"state\": \"CC\",\n    \"postal_code\": \"67890\",\n    \"country\": \"US\"\n  },\n  \"shipping_method\": \"standard\",\n  \"payment_method\": \"credit_card\",\n  \"notes\": \"Test order created via API\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/shops/{{shop_id}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"{{shop_id}}",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Order status updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"processing\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"processing\",\n  \"notes\": \"Order confirmed and being processed\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/shops/{{shop_id}}/orders/{{order_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"{{shop_id}}",
								"orders",
								"{{order_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Order management endpoints"
		},
		{
			"name": "Inventory",
			"item": [
				{
					"name": "Get Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Inventory data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/shops/{{shop_id}}/inventory?low_stock=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"{{shop_id}}",
								"inventory"
							],
							"query": [
								{
									"key": "low_stock",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stock updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.quantity_available).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"adjustment_type\": \"restock\",\n  \"quantity_change\": 100,\n  \"reason\": \"New inventory arrival\",\n  \"reference_number\": \"PO-2024-001\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/shops/{{shop_id}}/products/{{product_id}}/inventory",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"{{shop_id}}",
								"products",
								"{{product_id}}",
								"inventory"
							]
						}
					},
					"response": []
				}
			],
			"description": "Inventory management endpoints"
		},
		{
			"name": "Analytics",
			"item": [
				{
					"name": "Sales Analytics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Analytics data structure valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.total_revenue).to.be.a('number');",
									"    pm.expect(jsonData.total_orders).to.be.a('number');",
									"    pm.expect(jsonData.period).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/shops/{{shop_id}}/analytics/sales?period=last_30_days&group_by=day",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"{{shop_id}}",
								"analytics",
								"sales"
							],
							"query": [
								{
									"key": "period",
									"value": "last_30_days"
								},
								{
									"key": "group_by",
									"value": "day"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Product Performance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Product analytics returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.top_products).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/shops/{{shop_id}}/analytics/products?period=last_7_days&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"{{shop_id}}",
								"analytics",
								"products"
							],
							"query": [
								{
									"key": "period",
									"value": "last_7_days"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Analytics and reporting endpoints"
		},
		{
			"name": "Error Handling Tests",
			"item": [
				{
					"name": "Unauthorized Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error message present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/shops",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops"
							]
						},
						"description": "Test accessing protected endpoint without authentication"
					},
					"response": []
				},
				{
					"name": "Cross-Tenant Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403, 404]);",
									"});",
									"",
									"pm.test(\"Access denied\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/shops/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"00000000-0000-0000-0000-000000000000"
							]
						},
						"description": "Test accessing shop from different tenant (should fail)"
					},
					"response": []
				},
				{
					"name": "Invalid Product ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Not found error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include('not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/shops/{{shop_id}}/products/nonexistent-id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"{{shop_id}}",
								"products",
								"nonexistent-id"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Bad request error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ invalid json"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/shops",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops"
							]
						}
					},
					"response": []
				}
			],
			"description": "Error handling and edge case tests"
		},
		{
			"name": "Performance Tests",
			"item": [
				{
					"name": "Load Test - Get Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/shops/{{shop_id}}/products?limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"shops",
								"{{shop_id}}",
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								}
							]
						},
						"description": "Test API response time with larger payload"
					},
					"response": []
				},
				{
					"name": "Stress Test - Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Search handles complex query\", function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/search/products?q=smartphone+android+samsung+galaxy&category=electronics&min_price=100&max_price=1000&in_stock=true&sort=relevance&limit=100",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"search",
								"products"
							],
							"query": [
								{
									"key": "q",
									"value": "smartphone android samsung galaxy"
								},
								{
									"key": "category",
									"value": "electronics"
								},
								{
									"key": "min_price",
									"value": "100"
								},
								{
									"key": "max_price",
									"value": "1000"
								},
								{
									"key": "in_stock",
									"value": "true"
								},
								{
									"key": "sort",
									"value": "relevance"
								},
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Performance and stress tests"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set default base URL if not set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'https://api.shopmanagement.com');",
					"}",
					"",
					"// Add request timestamp for debugging",
					"pm.globals.set('request_timestamp', new Date().toISOString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test for all requests",
					"pm.test('Response has valid JSON', function () {",
					"    pm.response.to.be.json;",
					"});",
					"",
					"// Log response time for monitoring",
					"console.log(`Request completed in ${pm.response.responseTime}ms`);",
					"",
					"// Check for rate limiting headers",
					"if (pm.response.headers.get('X-RateLimit-Remaining')) {",
					"    console.log(`Rate limit remaining: ${pm.response.headers.get('X-RateLimit-Remaining')}`);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://api.shopmanagement.com",
			"type": "string"
		}
	]
}